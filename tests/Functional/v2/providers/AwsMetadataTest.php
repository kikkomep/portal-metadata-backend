<?php

namespace Tests\Functional\v2\providers;

use Propel\Runtime\Exception\PropelException;
use Slim\Exception\MethodNotAllowedException;
use Slim\Exception\NotFoundException;
use Symfony\Component\Config\Definition\Exception\Exception;
use Tests\Functional\BaseTestCase;
use OpenStackMetadataService;

class AwsMetadataTest extends BaseTestCase
{

    protected $AUTH_TOKEN_FIELD = "authToken";

    protected $authenticationToken = null;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        sleep(2);
    }


    public function getCredentials()
    {
        return array(
            "AWS_ACCESS_KEY_ID" => getenv("AWS_ACCESS_KEY_ID"),
            "AWS_SECRET_ACCESS_KEY" => getenv("AWS_SECRET_ACCESS_KEY")
        );
    }

    /**
     * @return mixed
     * @throws MethodNotAllowedException
     * @throws NotFoundException
     */
    public function getAuthenticationToken()
    {
        if (!$this->authenticationToken) {
            $response = $this->runApp(
                'POST',
                '/providers/openstack/authenticate',
                $this->getCredentials());
            $this->assertEquals(200, $response->getStatusCode());

            // decode response
            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("TOKEN: " . $data[$this->AUTH_TOKEN_FIELD]);
            $this->authenticationToken = $data;
        }
        return $this->authenticationToken;
    }

    public function testAuthenticate()
    {
        $data = $this->getCredentials();
        try {
            $response = $this->runApp('POST', '/providers/aws/authenticate', $data);
            $this->assertEquals(200, $response->getStatusCode());

            // decode response
            $data = json_decode($response->getBody(), true)["data"];
            print_r($data);

            // check not empty data
            $this->assertNotEmpty($data, "Authentication results seem to be empty");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }

    public function testAuthenticateFailure()
    {
        try {
            $data = array();
            $response = $this->runApp('POST', '/providers/aws/authenticate', $data);
            $this->assertEquals(401, $response->getStatusCode());

            // check not empty data
            $this->assertNotEmpty($response->getBody(), "Authentication results seem to be empty");

            // check error property not empty
            $error = json_decode($response->getBody(), true);
            $this->assertArrayHasKey("error", $error, "Error property not defined!");
            print_r($error);

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testListFlavors()
    {
        try {

            $data = $this->getCredentials();
            $response = $this->runApp('GET', '/providers/aws/flavors', $data);
            $this->assertEquals(200, $response->getStatusCode());

            // Check not empty response
            $this->assertNotEmpty($data, "Flavors array is empty!!!");

            // decode response
            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            // Check not empty
            $this->assertNotEmpty($data, "Flavors array is empty!!!");

            // Check number of flavors
            $flavors = $data["data"];
            $this->logger->debug("TYPE: " . gettype($flavors) . " -- " . count($flavors));
            $this->assertCount(115, $flavors, "Number of flavors different from the expected");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testListRegions()
    {
        try {
            $data = $this->getCredentials();
            $response = $this->runApp('GET', '/providers/aws/regions', $data);
            $this->logger->debug("GET Regions Response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            print_r($data);

            // Check not empty
            $this->assertNotEmpty($data, "Regions array is empty!!!");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testListZones()
    {
        try {
            $data = $this->getCredentials();
            $response = $this->runApp('GET', '/providers/aws/zones', $data);
            $this->logger->debug("GET Zones Response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            print_r($data);

            // Check not empty
            $this->assertNotEmpty($data, "Zones array is empty!!!");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }

}