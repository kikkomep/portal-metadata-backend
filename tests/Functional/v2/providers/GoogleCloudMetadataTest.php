<?php

namespace Tests\Functional\v2\providers;

use Propel\Runtime\Exception\PropelException;
use Slim\Exception\MethodNotAllowedException;
use Slim\Exception\NotFoundException;
use Symfony\Component\Config\Definition\Exception\Exception;
use Tests\Functional\BaseTestCase;
use OpenStackMetadataService;

class GoogleCloudMetadataTest extends BaseTestCase
{

    protected $AUTH_TOKEN_FIELD = "authToken";

    protected $authenticationToken = null;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        sleep(2);
    }


    public function getCredentials()
    {
        $data = file_get_contents(getenv("GOOGLE_CREDENTIALS"));
        return json_decode($data, true);
    }


    public function testAuthenticate()
    {
        $data = $this->getCredentials();
        try {
            $response = $this->runApp('POST', '/providers/gcp/authenticate', $data);
            $this->logger->debug("Authenticate response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            // check not empty response
            $this->assertNotEmpty($response->getBody(), "Authentication response seems to be empty");

            // decode response
            $data = json_decode($response->getBody(), true);

            // check not empty data
            $this->assertNotEmpty($data, "Authentication results seem to be empty");

            // check if data object contains the "data" field
            $this->assertArrayHasKey("data", $data, "Data object doesn't contain the property 'data'");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testAuthenticateFailure()
    {
        try {

            $credentials = array();
            $response = $this->runApp('POST', '/providers/gcp/authenticate', $credentials);
            $this->assertEquals(401, $response->getStatusCode());

            // check not empty response
            $this->assertNotEmpty($response->getBody(), "Authentication response seems to be empty");

            // decode response
            $data = json_decode($response->getBody(), true);

            // check not empty data
            $this->assertNotEmpty($data, "Authentication results seem to be empty");

            // check if data object contains the "data" field
            $this->assertArrayHasKey("error", $data, "Error object doesn't contain the property 'error'");

            // check if the response contains a token
            $data = $data['error'];
            $this->assertArrayHasKey("code", $data, "Error code not defined");
            $this->assertArrayHasKey("message", $data, "Error message not defined");
            print_r($data);

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testAuthenticateFailureWithInvalidProject()
    {
        try {

            $credentials = $this->getCredentials();
            $credentials["project_id"] .= "x";
            $response = $this->runApp('POST', '/providers/gcp/authenticate', $credentials);
            $this->assertEquals(401, $response->getStatusCode());

            // check not empty response
            $this->assertNotEmpty($response->getBody(), "Authentication response seems to be empty");

            // decode response
            $data = json_decode($response->getBody(), true);

            // check not empty data
            $this->assertNotEmpty($data, "Authentication results seem to be empty");

            // check if data object contains the "data" field
            $this->assertArrayHasKey("error", $data, "Error object doesn't contain the property 'error'");

            // check if the response contains a token
            $data = $data['error'];
            $this->assertArrayHasKey("code", $data, "Error code not defined");
            $this->assertArrayHasKey("message", $data, "Error message not defined");
            print_r($data);

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testAuthenticateFailureWithInvalidCredentials()
    {
        try {

            $credentials = $this->getCredentials();
            $credentials["private_key"] = "x";
            $response = $this->runApp('POST', '/providers/gcp/authenticate', $credentials);
            $this->assertEquals(401, $response->getStatusCode());

            // check not empty response
            $this->assertNotEmpty($response->getBody(), "Authentication response seems to be empty");

            // decode response
            $data = json_decode($response->getBody(), true);

            // check not empty data
            $this->assertNotEmpty($data, "Authentication results seem to be empty");

            // check if data object contains the "data" field
            $this->assertArrayHasKey("error", $data, "Error object doesn't contain the property 'error'");

            // check if the response contains a token
            $data = $data['error'];
            $this->assertArrayHasKey("code", $data, "Error code not defined");
            $this->assertArrayHasKey("message", $data, "Error message not defined");
            print_r($data);

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }

    public function testListFlavors()
    {
        try {
            $data = $this->getCredentials();
            $response = $this->runApp('POST', '/providers/gcp/flavors', $data);
            $this->logger->debug("GET Flavors Response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            // Check not empty
            $this->assertNotEmpty($data, "Flavors array is empty!!!");
            print_r($data);

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testListRegions()
    {
        try {
            $data = $this->getCredentials();
            $response = $this->runApp('POST', '/providers/gcp/regions', $data);
            $this->logger->debug("GET Regions Response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            print_r($data);

            // Check not empty
            $this->assertNotEmpty($data, "Regions array is empty!!!");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }


    public function testListZones()
    {
        try {
            $data = $this->getCredentials();
            $response = $this->runApp('POST', '/providers/gcp/zones', $data);
            $this->logger->debug("GET Zones Response: " . (string)$response->getBody());
            $this->assertEquals(200, $response->getStatusCode());

            $data = json_decode($response->getBody(), true)["data"];
            $this->logger->debug("Decoded RESPONSE: " . json_encode($data));

            print_r($data);

            // Check not empty
            $this->assertNotEmpty($data, "Zones array is empty!!!");

        } catch (MethodNotAllowedException $e) {
            print_r($e->getTrace());
        } catch (NotFoundException $e) {
            print_r($e->getTrace());
        }
    }

}